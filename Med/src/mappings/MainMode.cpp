#include "Main.h"

extern void Mappings::mainInit() {
    cK(Main, ({KEY_CTRL(' '), 'p'}), "cursor-up");
    cK(Main, ({KEY_CTRL(' '), 'n'}), "cursor-down");
    cK(Main, ({KEY_CTRL(' '), 'b'}), "cursor-left");
    cK(Main, ({KEY_CTRL(' '), 'f'}), "cursor-right");
    cK(Main, ({KEY_CTRL(' '), 'F'}), "cursor-right-word");
    cK(Main, ({KEY_CTRL(' '), 'B'}), "cursor-left-word");
    cK(Main, ({KEY_CTRL(' '), 'e'}), "cursor-word-end");
    cK(Main, ({KEY_CTRL(' '), 's'}), "cursor-word-beginning");
    cK(Main, ({KEY_CTRL(' '), 'E'}), "line-end");
    cK(Main, ({KEY_CTRL(' '), 'S'}), "line-start");

    cK(Main, ({KEY_CTRL('d')}), "transition-cursors");
    cK(Main, ({KEY_CTRL('x')}), "command-mode");
    cK(Main, ({KEY_CTRL('e')}), "exit");
    cK(Main, ({KEY_CTRL('f'), 's'}), "save-file");
    cK(Main, ({KEY_CTRL('w'), 's', 't'}), "window-split-top");
    cK(Main, ({KEY_CTRL('w'), 's', 'b'}), "window-split-bottom");
    cK(Main, ({KEY_CTRL('w'), 's', 'r'}), "window-split-right");
    cK(Main, ({KEY_CTRL('w'), 's', 'l'}), "window-split-left");

    cK(Main, ({'a'}), "insert-char a");
    cK(Main, ({'b'}), "insert-char b");
    cK(Main, ({'c'}), "insert-char c");
    cK(Main, ({'d'}), "insert-char d");
    cK(Main, ({'e'}), "insert-char e");
    cK(Main, ({'f'}), "insert-char f");
    cK(Main, ({'g'}), "insert-char g");
    cK(Main, ({'h'}), "insert-char h");
    cK(Main, ({'i'}), "insert-char i");
    cK(Main, ({'j'}), "insert-char j");
    cK(Main, ({'k'}), "insert-char k");
    cK(Main, ({'l'}), "insert-char l");
    cK(Main, ({'m'}), "insert-char m");
    cK(Main, ({'n'}), "insert-char n");
    cK(Main, ({'o'}), "insert-char o");
    cK(Main, ({'p'}), "insert-char p");
    cK(Main, ({'q'}), "insert-char q");
    cK(Main, ({'r'}), "insert-char r");
    cK(Main, ({'s'}), "insert-char s");
    cK(Main, ({'t'}), "insert-char t");
    cK(Main, ({'u'}), "insert-char u");
    cK(Main, ({'v'}), "insert-char v");
    cK(Main, ({'w'}), "insert-char w");
    cK(Main, ({'x'}), "insert-char x");
    cK(Main, ({'y'}), "insert-char y");
    cK(Main, ({'z'}), "insert-char z");
    cK(Main, ({'A'}), "insert-char A");
    cK(Main, ({'B'}), "insert-char B");
    cK(Main, ({'C'}), "insert-char C");
    cK(Main, ({'D'}), "insert-char D");
    cK(Main, ({'E'}), "insert-char E");
    cK(Main, ({'F'}), "insert-char F");
    cK(Main, ({'G'}), "insert-char G");
    cK(Main, ({'H'}), "insert-char H");
    cK(Main, ({'I'}), "insert-char I");
    cK(Main, ({'J'}), "insert-char J");
    cK(Main, ({'K'}), "insert-char K");
    cK(Main, ({'L'}), "insert-char L");
    cK(Main, ({'M'}), "insert-char M");
    cK(Main, ({'N'}), "insert-char N");
    cK(Main, ({'O'}), "insert-char O");
    cK(Main, ({'P'}), "insert-char P");
    cK(Main, ({'Q'}), "insert-char Q");
    cK(Main, ({'R'}), "insert-char R");
    cK(Main, ({'S'}), "insert-char S");
    cK(Main, ({'T'}), "insert-char T");
    cK(Main, ({'U'}), "insert-char U");
    cK(Main, ({'V'}), "insert-char V");
    cK(Main, ({'W'}), "insert-char W");
    cK(Main, ({'X'}), "insert-char X");
    cK(Main, ({'Y'}), "insert-char Y");
    cK(Main, ({'Z'}), "insert-char Z");
    cK(Main, ({' '}), "insert-char SPC");
    cK(Main, ({KEY_ENTER_U}), "insert-char RTN");
    cK(Main, ({'-'}), "insert-char -");
    cK(Main, ({'_'}), "insert-char _");
    cK(Main, ({'1'}), "insert-char 1");
    cK(Main, ({'2'}), "insert-char 2");
    cK(Main, ({'3'}), "insert-char 3");
    cK(Main, ({'4'}), "insert-char 4");
    cK(Main, ({'5'}), "insert-char 5");
    cK(Main, ({'6'}), "insert-char 6");
    cK(Main, ({'7'}), "insert-char 7");
    cK(Main, ({'8'}), "insert-char 8");
    cK(Main, ({'9'}), "insert-char 9");
    cK(Main, ({'0'}), "insert-char 0");
    cK(Main, ({'!'}), "insert-char !");
    cK(Main, ({'@'}), "insert-char @");
    cK(Main, ({'#'}), "insert-char #");
    cK(Main, ({'$'}), "insert-char $");
    cK(Main, ({'%'}), "insert-char %");
    cK(Main, ({'^'}), "insert-char ^");
    cK(Main, ({'&'}), "insert-char &");
    cK(Main, ({'*'}), "insert-char *");
    cK(Main, ({'('}), "insert-char (");
    cK(Main, ({')'}), "insert-char )");
    cK(Main, ({'['}), "insert-char [");
    cK(Main, ({']'}), "insert-char ]");
    cK(Main, ({'{'}), "insert-char {");
    cK(Main, ({'}'}), "insert-char }");
    cK(Main, ({';'}), "insert-char ;");
    cK(Main, ({':'}), "insert-char :");
    cK(Main, ({'\''}), "insert-char \'");
    cK(Main, ({'\"'}), "insert-char \"");
    cK(Main, ({'\\'}), "insert-char \\");
    cK(Main, ({'|'}), "insert-char |");
    cK(Main, ({'/'}), "insert-char /");
    cK(Main, ({'?'}), "insert-char ?");
    cK(Main, ({'.'}), "insert-char .");
    cK(Main, ({','}), "insert-char ,");
    cK(Main, ({'>'}), "insert-char >");
    cK(Main, ({'<'}), "insert-char <");
    cK(Main, ({'='}), "insert-char =");
    cK(Main, ({'+'}), "insert-char +");
    cK(Main, ({'~'}), "insert-char ~");
    cK(Main, ({'`'}), "insert-char `");
    cK(Main, ({KEY_BACKSPACE_U}), "pop-char");
}
